"Set up Google OAuth authentication. After you make changes, you MUST:
1. Test the actual authentication flow yourself
2. Show me the exact error messages if it fails
3. Verify the redirect URI matches what's in Google Console
4. Check that client ID and secret are properly loaded
5. Don't tell me it's fixed until you've actually tested the login button"
```

**When it says "fixed" but isn't:**
```
"Stop. You said it's fixed but it's not working. Before writing any more code:
1. Show me the CURRENT error message from the console/logs
2. Explain what the error actually means
3. Show me the relevant code that's causing this specific error
4. Then explain your fix and WHY it will work this time"
```

**Force verification:**
```
"Don't just write code. After each change:
- Actually click the Google login button
- Show me what happens
- If there's an error, paste the EXACT error message
- Test the full flow from login → redirect → success"
```

## 2. Get It to Actually Test

**Use these tactics:**

**Break it into smaller steps:**
```
"Let's fix Google auth step by step:
Step 1: First, just verify the Google Console setup is correct. Show me the current redirect URIs.
Step 2: Check if environment variables are loading. Console.log the client ID (first 10 chars only).
Step 3: Test just the /auth/google route. Does it redirect to Google?
Step 4: [continue...]

Do NOT move to the next step until the current one works."
```

**Demand proof:**
```
"Show me a screenshot or the actual console output proving the login button works. I need to see:
- The browser redirects to Google
- Google's login screen appears
- After login, it redirects back successfully
- User data is received"
```

**Force error analysis:**
```
"The error says [paste exact error]. What does THIS SPECIFIC ERROR mean? What in the code is causing THIS ERROR? Show me the exact line."
```

## 3. Working with Max Reasoning Mode

Since you're using the higher-powered option, **leverage it properly:**

**Give it diagnostic tasks:**
```
"Before fixing anything, diagnose the problem:
1. Trace the authentication flow step-by-step
2. Identify where exactly it's breaking
3. Show me the state of variables at each step
4. What's the root cause vs symptoms?"
```

**Make it think through the solution:**
```
"You've tried fixing this 3 times. Let's think differently:
- What assumptions have you been making?
- What haven't we checked yet?
- Could this be a configuration issue vs code issue?
- Walk through what SHOULD happen vs what IS happening"
```

## 4. Common Google Auth Issues to Check

Tell Replit to verify these specifically:
```
"Stop coding for a moment. Verify these Google OAuth requirements:
1. Authorized redirect URIs in Google Console EXACTLY match your app's callback URL (including http vs https, trailing slashes)
2. Environment variables are actually loaded (add console.logs)
3. The OAuth consent screen is configured
4. Credentials are for the right project
5. The callback route actually exists and handles the response

Show me proof of each one."
```

## 5. The "Nuclear Option" Prompt

When nothing works and you're stuck in a loop:
```
"We've been going in circles. Let's start fresh:
1. Show me the COMPLETE current authentication code (all files)
2. Show me your Google Console settings (screenshot or details)
3. Show me the EXACT error happening right now
4. Let's rebuild the auth flow from scratch, testing each piece

Do NOT say something is fixed unless you can show me it working."